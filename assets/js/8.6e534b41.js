(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{223:function(t,s,a){t.exports=a.p+"assets/img/singleton1.9a395d9f.png"},241:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),n("blockquote",[n("p",[t._v("@author huangdailin")])]),t._v(" "),n("p",[t._v("在有些系统中，为了节省内存资源、保证数据内容的一致性，对某些类要求只能创建一个实例，就是"),n("code",[t._v("单例模式")]),t._v("；")]),t._v(" "),n("h3",{attrs:{id:"一、定义与特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、定义与特点"}},[t._v("#")]),t._v(" 一、定义与特点")]),t._v(" "),n("p",[n("code",[t._v("单例模式的定义")]),t._v("：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。比如，Windows中只能打开一个任务管理器，可以避免因为打开多个任务管理器窗口而造成的资源浪费，或者出现各个窗口显示内容不一致的错误。")]),t._v(" "),n("p",[n("code",[t._v("常见的单例")]),t._v("：在计算机系统中，Windows的回收站、操作系统中的文件系统、多线程中的线程池、显卡中的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、web应用的配置对象、应用程序的对话框、系统中的缓存等；")]),t._v(" "),n("p",[n("code",[t._v("单例模式的特点：")])]),t._v(" "),n("ol",[n("li",[t._v("单例类只有一个实例对象；")]),t._v(" "),n("li",[t._v("该单例对象必须是由单例类自行创建；")]),t._v(" "),n("li",[t._v("单例类对外提供一个访问该单例的全局访问点；")])]),t._v(" "),n("h3",{attrs:{id:"二、结构与实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、结构与实现"}},[t._v("#")]),t._v(" 二、结构与实现")]),t._v(" "),n("p",[t._v("单例模式是设计模式中最简单的模式之一。通常，普通类的构造函数是公有的，外部类可以通过"),n("code",[t._v("new 构造函数()")]),t._v("来生成多个实例。但是，如果将类的构造函数设为私有的，外部类就无法调用该构造函数，也就没有办法生成多个实例。这时候该类本身必须要"),n("code",[t._v("定义一个静态私有实例")]),t._v("，并且向外提供一个"),n("code",[t._v("静态的公有函数")]),t._v("用于创建或者获取该静态私有实例。")]),t._v(" "),n("h4",{attrs:{id:"_1）单例模式的结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1）单例模式的结构"}},[t._v("#")]),t._v(" 1）单例模式的结构")]),t._v(" "),n("p",[t._v("单例模式的主要角色如下：")]),t._v(" "),n("ul",[n("li",[t._v("单例类：包含一个实例并且能够自行创建这个实例的类；")]),t._v(" "),n("li",[t._v("访问类：使用该单例的类。")])]),t._v(" "),n("p",[t._v("类图如下所示：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(223),alt:"1575094274347"}})]),t._v(" "),n("h4",{attrs:{id:"_2）单例模式的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2）单例模式的实现"}},[t._v("#")]),t._v(" 2）单例模式的实现")]),t._v(" "),n("h5",{attrs:{id:"_1-懒汉式单例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-懒汉式单例"}},[t._v("#")]),t._v(" 1."),n("code",[t._v("懒汉式单例")])]),t._v(" "),n("p",[t._v("这种模式的特点是类加载的时候没有生成单例，只有当第一次调用"),n("code",[t._v("getInstance()")]),t._v("方法时才会去创建这个单例。代码如下：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LazySingleton")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 保证instance在所以线程中同步\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LazySingleton")]),t._v(" instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * private 避免在外部被实例化\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LazySingleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 静态公有方法\n     *\n     * @return 实例对象\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LazySingleton")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LazySingleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("code",[t._v("注意：")]),t._v("如果编写的是多线程程序，不能删除代码中的"),n("code",[t._v("volatile")]),t._v("和"),n("code",[t._v("synchronized")]),t._v("关键字，否则将会存在"),n("code",[t._v("线程非安全")]),t._v("的问题。有了两个关键字就能够保证线程安全，但是每次访问时都要同步，会影响性能，这就是懒汉式单例的缺点。")]),t._v(" "),n("h5",{attrs:{id:"_2-饿汉式单例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-饿汉式单例"}},[t._v("#")]),t._v(" 2."),n("code",[t._v("饿汉式单例")])]),t._v(" "),n("p",[t._v("这种模式的特点是一旦类被加载，保证在调用"),n("code",[t._v("getInstance()")]),t._v("方法之前单例就已经存在了。代码如下：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HungrySingleton")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 类加载就创建单例\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HungrySingleton")]),t._v(" instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HungrySingleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 私有构造方法\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HungrySingleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 静态公有方法\n     *\n     * @return 实例对象\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HungrySingleton")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("code",[t._v("注意：")]),t._v("饿汉式单例模式在类创建时就已经创建好了一个静态的对象供系统使用，以后不会再改变，所以是"),n("code",[t._v("线程安全的")]),t._v("，可以直接用于多线程而不会出现问题。"),n("code",[t._v("缺点：")]),t._v("因为一开始就初始化，容易产生垃圾。")]),t._v(" "),n("h5",{attrs:{id:"_3-静态内部类单例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-静态内部类单例"}},[t._v("#")]),t._v(" 3."),n("code",[t._v("静态内部类单例")])]),t._v(" "),n("p",[t._v("只有第一次调用"),n("code",[t._v("getInstance()")]),t._v("方法时，虚拟机才加载 "),n("code",[t._v("Inner")]),t._v(" 并初始化"),n("code",[t._v("instance")]),t._v(" 。代码如下：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InnerSingleton")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 私有构造方法\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InnerSingleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 静态内部类\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Inner")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InnerSingleton")]),t._v(" instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InnerSingleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 静态公有方法\n     *\n     * @return 实例对象\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InnerSingleton")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Inner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("code",[t._v("注意：")]),t._v("只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中"),n("code",[t._v("最推荐的模式")]),t._v("，但具体还是根据项目选择。")]),t._v(" "),n("h3",{attrs:{id:"三、应用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、应用场景"}},[t._v("#")]),t._v(" 三、应用场景")]),t._v(" "),n("p",[t._v("根据单例模式的结构和特点，下面是适用的场景的特点")]),t._v(" "),n("ul",[n("li",[t._v("在应用场景中，某类只要求生成一个对象的时候，如一个班中的班长、每个人的身份证号等。")]),t._v(" "),n("li",[t._v("当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象的访问速度。如web中的配置对象、数据库的连接池等。")]),t._v(" "),n("li",[t._v("当某类需要频繁的实例化，而创建的对象又频繁的被销毁的时候，如多线程的线程池、网络连接池等。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);